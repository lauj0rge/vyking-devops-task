{{- if .Values.backend.enabled }}
{{- $root := . -}}
{{- $backend := $root.Values.backend -}}
{{- $name := include "vyking-app.backendFullname" $root -}}
{{- $namespace := default $root.Release.Namespace $backend.namespace -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $name }}
    environment: {{ include "vyking-app.environment" $root }}
    {{- range $key, $value := $backend.labels }}
    {{ $key }}: {{ $value }}
    {{- end }}
spec:
  replicas: {{ $backend.replicaCount }}
  selector:
    matchLabels:
      app: {{ $name }}
  template:
    metadata:
      labels:
        app: {{ $name }}
        environment: {{ include "vyking-app.environment" $root }}
        {{- range $key, $value := $backend.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      containers:
        - name: backend
          image: "{{ $backend.image.repository }}:{{ $backend.image.tag }}"
          imagePullPolicy: {{ $backend.image.pullPolicy }}
          ports:
            - containerPort: {{ $backend.service.port }}
          env:
            - name: MYSQL_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ $backend.mysql.secretName }}
                  key: host
            - name: MYSQL_PORT
              valueFrom:
                secretKeyRef:
                  name: {{ $backend.mysql.secretName }}
                  key: port
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ $backend.mysql.secretName }}
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $backend.mysql.secretName }}
                  key: password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ $backend.mysql.secretName }}
                  key: database
          livenessProbe:
            httpGet:
              path: {{ $backend.probes.liveness.path }}
              port: {{ $backend.probes.liveness.port }}
            initialDelaySeconds: {{ $backend.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ $backend.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ $backend.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ $backend.probes.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ $backend.probes.readiness.path }}
              port: {{ $backend.probes.readiness.port }}
            initialDelaySeconds: {{ $backend.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ $backend.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ $backend.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ $backend.probes.readiness.failureThreshold }}
          resources:
{{- toYaml $backend.resources | nindent 12 }}
          securityContext:
{{- toYaml $backend.securityContext | nindent 12 }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $name }}
  namespace: {{ $namespace }}
spec:
  type: {{ $backend.service.type }}
  selector:
    app: {{ $name }}
  ports:
    - port: {{ $backend.service.port }}
      targetPort: {{ $backend.service.port }}
      protocol: TCP
{{- end }}
